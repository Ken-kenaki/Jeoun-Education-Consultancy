// app/api/chat/route.ts
import { NextRequest, NextResponse } from 'next/server';

// Define TypeScript interfaces
interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface OpenRouterRequest {
  model: string;
  messages: ChatMessage[];
  temperature?: number;
  max_tokens?: number;
  stream?: boolean;
}

interface OpenRouterErrorResponse {
  error: {
    message: string;
    type: string;
    code: number;
  };
}

interface OpenRouterResponse {
  id: string;
  choices: {
    message: ChatMessage;
    finish_reason: string;
    index: number;
  }[];
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export async function POST(req: NextRequest) {
  // Only allow POST requests
  if (req.method !== 'POST') {
    return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });
  }

  try {
    const { message, conversationHistory } = await req.json();

    // Validate the request
    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Valid message is required' },
        { status: 400 }
      );
    }

    // Check if API key is set
    if (!process.env.OPENROUTER_API_KEY) {
      console.error('OPENROUTER_API_KEY is not set in environment variables');
      return NextResponse.json(
        { error: 'Server configuration error: API key missing' },
        { status: 500 }
      );
    }

    // Build the messages array
    const messages: ChatMessage[] = conversationHistory || [];
    messages.push({ role: 'user', content: message });

    // Prepare the request to OpenRouter
    const openRouterRequest: OpenRouterRequest = {
      model: 'deepseek/deepseek-chat', // Correct model format
      messages,
      temperature: 0.7,
      max_tokens: 1000,
      stream: false,
    };

    console.log('Sending request to OpenRouter with model:', openRouterRequest.model);

    // Make request to OpenRouter
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'HTTP-Referer': process.env.SITE_URL || 'http://localhost:3000',
        'X-Title': process.env.SITE_NAME || 'Joeun Education Consultancy',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(openRouterRequest),
    });

    const responseText = await response.text();
    console.log('OpenRouter response status:', response.status);

    if (!response.ok) {
      let errorMessage = `OpenRouter API error: ${response.status}`;
      
      try {
        const errorData: OpenRouterErrorResponse = JSON.parse(responseText);
        errorMessage = errorData.error?.message || errorMessage;
        console.error('OpenRouter API error details:', errorData);
      } catch (e) {
        console.error('OpenRouter API error response (could not parse):', responseText);
      }
      
      return NextResponse.json(
        { error: errorMessage },
        { status: response.status }
      );
    }

    let data: OpenRouterResponse;
    try {
      data = JSON.parse(responseText);
      console.log('OpenRouter response parsed successfully');
    } catch (parseError) {
      console.error('Failed to parse OpenRouter response:', parseError, responseText);
      return NextResponse.json(
        { error: 'Invalid response format from AI service' },
        { status: 500 }
      );
    }
    
    // Extract the assistant's reply
    const assistantReply = data.choices?.[0]?.message?.content;
    
    if (!assistantReply) {
      console.error('No assistant reply in response:', data);
      return NextResponse.json(
        { error: 'No response generated by AI' },
        { status: 500 }
      );
    }

    // Return the successful response
    return NextResponse.json({ 
      reply: assistantReply,
    });

  } catch (error) {
    console.error('Chat API unexpected error:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
}

// Add this to handle preflight requests (CORS)
export async function OPTIONS() {
  return NextResponse.json({}, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}